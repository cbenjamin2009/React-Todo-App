{"version":3,"sources":["functionBased/components/TodoItem.module.css","functionBased/components/TodoItem.js","functionBased/components/ToDosList.js","functionBased/components/Header.js","functionBased/components/InputTodo.js","functionBased/components/Navbar.js","functionBased/pages/SinglePage.js","functionBased/pages/About.js","functionBased/pages/NotMatch.js","functionBased/components/TodoContainer.js","index.js"],"names":["module","exports","TodoItem","props","useState","editing","setEditing","todo","completed","id","title","viewMode","editMode","display","useEffect","console","log","className","styles","item","onDoubleClick","style","type","checkbox","checked","onChange","handleChangeProps","onClick","deleteTodoProps","color","fontSize","fontStyle","opacity","textDecoration","textInput","value","e","setUpdate","target","onKeyDown","event","key","ToDosList","todos","map","Header","padding","lineHeight","fontWeight","marginBottom","textTransform","textAlign","InputTodo","inputText","setInputText","onSubmit","preventDefault","trim","addTodoProps","alert","placeholder","name","marginTop","Navbar","navbarOpen","setNavbarOpen","width","height","path","text","link","to","activeClassName","exact","SinglePage","slug","useParams","aboutContent","description","find","About","useRouteMatch","url","NotMatch","TodoContainer","temp","localStorage","getItem","JSON","parse","getInitialTodos","setTodos","stringify","setItem","newTodo","uuidv4","prevState","filter","updateTitle","ReactDOM","render","StrictMode","basename","ProcessingInstruction","env","PUBLIC_URL","document","getElementById"],"mappings":"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","file":"static/js/main.cd0fc83b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TodoItem_item__2164v\",\"checkbox\":\"TodoItem_checkbox__3X32X\",\"textInput\":\"TodoItem_textInput__YiAAP\"};","import React, {useState, useEffect} from 'react'\r\n\r\n//icon files \r\nimport {FaTrashAlt} from 'react-icons/fa'\r\n//import module css styling \r\nimport styles from \"./TodoItem.module.css\"\r\n\r\nconst TodoItem = props => {\r\n    const [editing, setEditing] = useState(false)\r\n\r\n    //class based state\r\n// state = {\r\n//     editing: false,\r\n// }\r\n\r\n   const handleEditing = () => {\r\n    setEditing(true)    \r\n    // setState({\r\n        //     editing: true,\r\n\r\n        // })\r\n    }\r\n\r\n    //when done editing, and enter is pressed, update state to reflect this\r\n   const handleUpdateDone = event => {\r\n        if (event.key === \"Enter\"){\r\n            setEditing(false)\r\n        }\r\n    //    if (event.key === \"Enter\") {\r\n    //        setState({editing: false})\r\n    //    }\r\n\r\n    }\r\n\r\n    // render() {\r\n        // the below return takes props that are being passed down by ToDosList and then uses those props \r\n        // to render a Button and a LI with a Checkbox, Button, and Name for each item. \r\n        // These items are in State that are in TodoContainer and being passed to ToDosList then to this component. \r\n\r\n        // style object for completed items\r\n        const completedStyle = {\r\n            fontStyle: \"italic\",\r\n            color: \"#595959\",\r\n            opacity: 0.4,\r\n            textDecoration: \"line-through\",\r\n        }\r\n\r\n        //Using destructuring can result in cleaner code. So lets destructure the props so we don't have to keep writing props.todo.# \r\n        const {completed, id, title} = props.todo;\r\n\r\n        let viewMode = {}\r\n        let editMode = {}\r\n\r\n        if (editing) {\r\n            viewMode.display = \"none\"\r\n        } else {\r\n            editMode.display = \"none\"\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n            return () => {\r\n                console.log(\"cleaning up...\")\r\n            }\r\n        }, [])\r\n       \r\n    return (\r\n    <li className={styles.item}> <div onDoubleClick={handleEditing} style={viewMode}>\r\n        <input \r\n            type=\"checkbox\" \r\n            className={styles.checkbox}\r\n            checked={completed} \r\n            onChange={() => props.handleChangeProps(id)}\r\n        /> \r\n        <button \r\n            className=\"btn btn-danger\" \r\n            onClick={() => props.deleteTodoProps(id)}\r\n        >\r\n            <FaTrashAlt style={{ color: \"orangered\", fontSize: \"1.8em\"}}/>\r\n        </button>\r\n        {/* We want to style our completed tasks differently than our non-completed tasks, this is done using a tenary operator to apply custom style */}\r\n        <span \r\n            style={completed ? completedStyle : null}\r\n        >\r\n            {title}\r\n        </span>\r\n        </div>\r\n        <input \r\n            type=\"text\"\r\n            style={editMode} \r\n            className={styles.textInput} \r\n            value={title}\r\n            onChange = {e => {\r\n                props.setUpdate(e.target.value, id)\r\n            }}\r\n            onKeyDown={handleUpdateDone}\r\n        />\r\n        </li>\r\n        )\r\n//}\r\n}\r\n\r\n\r\nexport default TodoItem","import React from 'react'\r\nimport TodoItem from \"./TodoItem\"\r\n\r\nconst ToDosList = props => {\r\n    // render() {\r\n        //The return statement takes props being passed to this file by the parent TodoContainer and then uses the map function to pass \r\n        // these props down to the TodoItem component so that the TodoItem.js file can access the Key, todo, and handleChange and delete functions \r\n        return (\r\n          <ul>\r\n              {props.todos.map(todo => (\r\n                 <TodoItem \r\n                    key={todo.id} \r\n                    todo={todo} \r\n                    handleChangeProps={props.handleChangeProps}\r\n                    deleteTodoProps={props.deleteTodoProps}\r\n                    setUpdate={props.setUpdate}\r\n                />\r\n              ))}\r\n          </ul>\r\n        )\r\n    // }\r\n}\r\nexport default ToDosList","import React from \"react\"\r\n\r\nconst Header = () => {\r\n    //inline styles are intentional \r\n    // Double curly brace -> This is becuase first set is to denote javascript and second set is to denote a object \r\n    const headerStyle = {\r\n        padding: \"20px 0\",\r\n        lineHeight: \"1.5em\",\r\n    }\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1\r\n            style={{\r\n                fontSize: \"6rem\",\r\n                fontWeight: \"600\",\r\n                marginBottom: \"2rem\",\r\n                lineHeight: \"1em\",\r\n                color: \"#ececec\",\r\n                textTransform:\"lowercase\",\r\n                textAlign: \"center\"\r\n            }}>\r\n            Task Master</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState } from \"react\"\r\n\r\n//icon files\r\nimport { FaPlusSquare } from \"react-icons/fa\"\r\n\r\nconst InputTodo = props => {\r\n  const [inputText, setInputText] = useState({\r\n    title: \"\",\r\n  })\r\n\r\n  const onChange = e => {\r\n    setInputText({\r\n      ...inputText,\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    if (inputText.title.trim()) {\r\n      props.addTodoProps(inputText.title)\r\n      setInputText({\r\n        title: \"\",\r\n      })\r\n    } else {\r\n      alert(\"Please write item\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"form-container\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"input-text\"\r\n        placeholder=\"Add todo...\"\r\n        value={inputText.title}\r\n        name=\"title\"\r\n        onChange={onChange}\r\n      />\r\n      <button className=\"input-submit\"><FaPlusSquare style={{ color: \"forestgreen\", marginTop: \"2px\", fontSize: \"2em\"}}/></button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default InputTodo\r\n\r\n// Alternate styling for react icons\r\n// import { IconContext } from \"react-icons\"\r\n// <IconContext.Provider\r\n//   value={{\r\n//     color: \"darkcyan\",\r\n//     style: { fontSize: \"20px\", color: \"#ff0000\" },\r\n//     className: \"submit-iconn\",\r\n//   }}\r\n// >\r\n//   <button className=\"input-submit\">\r\n//     <FaPlusCircle />\r\n//     <FaPlusCircle />\r\n//     <FaPlusCircle />\r\n//   </button>\r\n// </IconContext.Provider>","import React, {useState} from 'react'\r\n\r\n//router Link component \r\nimport {NavLink} from \"react-router-dom\"\r\n\r\n//import react-icons \r\nimport { MdClose } from \"react-icons/md\"\r\nimport {FiMenu} from \"react-icons/fi\"\r\n\r\nconst Navbar = () => {\r\n    const [navbarOpen, setNavbarOpen] = useState(false)\r\n    const links = [\r\n        {\r\n            id: 1,\r\n            path: \"/\",\r\n            text: \"Home\",\r\n        },\r\n        {\r\n            id: 2,\r\n            path: \"/about\",\r\n            text: \"About\",\r\n        }\r\n    ]\r\n\r\n    const handleToggle = () => {\r\n        //setNavbarOpen(prev => !prev)\r\n        setNavbarOpen(!navbarOpen)\r\n    }\r\n\r\n    const closeMenu = () => {\r\n        setNavbarOpen(false)\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navBar\">\r\n            {/* Dynamically set button text based on state */}\r\n            <button onClick={handleToggle}>{navbarOpen ? \r\n            (<MdClose style={{ color: \"#00000A\", width: \"40px\", height: \"40px\" }} /> ) \r\n             : ( <FiMenu style={{ color: \"#0000AA\", width: \"40px\", height: \"40px\" }} />\r\n   \r\n  )}</button>\r\n            {/* Creat a class name based on state when visible */}\r\n            <ul className={`menuNav ${navbarOpen ? \" showMenu\" : \"\"}`}>\r\n                {links.map(link => {\r\n                    return (\r\n                    <li key={link.id}>\r\n                        <NavLink to={link.path} activeClassName=\"active-link\" onClick={() => closeMenu()} exact>{link.text}</NavLink>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport {useParams} from \"react-router-dom\"\r\n\r\nconst SinglePage =() => {\r\n    //console.log(useParams())\r\n    // => {slug: \"about-app\"}\r\n    // we will render dynamic content from an array of objects on the single page based on which slug is being used. \r\n    const aboutData = [\r\n        {\r\n            slug: \"about-app\",\r\n            title: \"About the App\",\r\n            description: \"In this app, you can add, delete, submit, and edit items. To edit items, simply double click, make adjustments, and press Enter to save the changes\"\r\n        },\r\n        {\r\n            slug: \"about-author\",\r\n            title: \"About the Author\",\r\n            description: \"This app was developed by Chris Benjamin as a single page React App based on Ibas Majid tutorial of React\"\r\n\r\n        }\r\n    ]\r\n    // Then, with the help of the find() method, we will be returning the first object in the array whose slug matches current page slug. The returned object is then stored in the aboutContent variable. From there, we are destructuring the title and description.\r\n    const { slug } = useParams()\r\n    const aboutContent = aboutData.find(item => item.slug === slug)\r\n    const {title, description} = aboutContent\r\n    return (\r\n        <div className=\"main__content\">\r\n           <h1>{title}</h1>\r\n           <p>{description}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SinglePage\r\n","import React from 'react'\r\nimport { Link, Route, useRouteMatch } from 'react-router-dom'\r\nimport SinglePage from \"./SinglePage.js\"\r\n\r\nconst About = () => {\r\n    console.log(useRouteMatch())\r\n\r\n    const {url, path} = useRouteMatch()\r\n\r\n    return (\r\n        <div className=\"about__content\">\r\n            <ul className=\"about__list\">\r\n                <li>\r\n                    <Link to={`${url}/about-app`}>About App</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to={`${url}/about-author`}>About Author</Link>\r\n                </li>\r\n            </ul>\r\n            <Route path={`${path}/:slug`}>\r\n            <SinglePage />\r\n            </Route>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  About","import React from 'react'\r\n\r\nconst NotMatch = () => {\r\n    return (\r\n        <div>\r\n            <h3>No match for this page</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default NotMatch","import React, { useState, useEffect } from 'react'\r\n\r\n//Components \r\nimport TodosList from \"./ToDosList\"\r\nimport Header from \"./Header\"\r\nimport InputTodo from \"./InputTodo\"\r\nimport Navbar from \"./Navbar\"\r\n\r\n//React router imports\r\nimport {Route, Switch} from \"react-router-dom\"\r\n\r\n// React  Router Switch Pages\r\nimport About from \"../pages/About\"\r\nimport NotMatch from \"../pages/NotMatch\"\r\n\r\n//Project source: https://ibaslogic.com/react-tutorial-for-beginners/ \r\n//API Source: https://jsonplaceholder.typicode.com/todos \r\n\r\n// add UUID tool for generating random ID's\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst TodoContainer = () => {\r\n    const [todos, setTodos] = useState(getInitialTodos())\r\n\r\n    // state = {\r\n    //     todos: [\r\n    //         // COmmenting out so we can pull from JSONplaceholder API  \r\n    //         //{\r\n    //         //     id: uuidv4(),\r\n    //         //     title: \"Setup dev environment\",\r\n    //         //     completed: true,\r\n    //         // },\r\n    //         // {\r\n    //         //     id: uuidv4(),\r\n    //         //     title: \"Dev website and add content\",\r\n    //         //     completed: false,\r\n    //         // },\r\n    //         // {\r\n    //         //     id: uuidv4(),\r\n    //         //     title: \"Deploy to live server\",\r\n    //         //     completed: false,\r\n    //         // }\r\n    //     ]\r\n    // };\r\n    //receives change from TodoItem onChange event and passes back the this.props.todo.id \r\n    // the below method relies on flipping the state is it appears in state. If this is pending form a previous update we may get innaccurate results. See next function \r\n    // handleChange = id => {\r\n    //     this.setState({\r\n    //         todos: this.state.todos.map(todo => {\r\n    //             if (todo.id == id) {\r\n    //                 todo.completed = !todo.completed;\r\n    //             }\r\n    //             return todo;\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    // this version of handleChange creates a previousState variable to check against and then returns a ES6 Spread Object to toggle the completed variable. \r\n    const handleChange = id => {\r\n            setTodos(prevState => \r\n                prevState.map(todo => {\r\n                    if (todo.id === id) {\r\n                        return {\r\n                            ...todo,\r\n                            completed: !todo.completed,\r\n                        }\r\n                    }\r\n                    return todo\r\n                }))\r\n}\r\n\r\n    //delete button event this will use the array filter method to return anything not the ID that was deleted. \r\n   const delTodo = id => {\r\n       setTodos([\r\n           ...todos.filter(todo => {\r\n               return todo.id !== id\r\n           })\r\n       ])\r\n       \r\n    }\r\n    //handle adding new items when submit button is pressed, pass in the value from the textbox (title) to store in state. \r\n   const addTodoItem = title => {\r\n        //grab title being passed form input through props\r\n       const newTodo = {\r\n           id: uuidv4(), \r\n           title: title,\r\n           completed: false\r\n       }\r\n       //update state by using spread to grab current todos and then add newTodo\r\n       setTodos([...todos, newTodo])\r\n    }\r\n\r\n    //When editing ToDo items we need to be able to update the state with new title based on ID that was edited\r\n   const setUpdate = (updateTitle, id) => {\r\n       setTodos(\r\n           todos.map(todo => {\r\n               if (todo.id === id) {\r\n                   todo.title = updateTitle\r\n               }\r\n               return todo\r\n           })\r\n       )\r\n       \r\n    }\r\n\r\n    //lets fetch data from JSONplaceholder \r\n    // componentDidMount() {\r\n    //     fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\r\n    //     .then(response=> response.json()) // convert the response to JSON, only needed if not axios \r\n    //     .then(data => this.setState({todos:data})) // the response.json() returns a data field that we can use to see the data we pull. \r\n    // }\r\n\r\n    //lets pull from local storage \r\n    // componentDidMount() {\r\n    //     //create variable and retrieve items in \"todos\" from local storage \r\n    //     const temp = localStorage.getItem(\"todos\")\r\n    //     //lets convert this informatoin to JSON format \r\n    //     const loadedTodos = JSON.parse(temp)\r\n    //     // if we loaded any todos then we want to put them into state \r\n    //     if (loadedTodos) {\r\n    //         this.setState({\r\n    //             todos: loadedTodos\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // // on the update, if the Todos have changed, then update local storage \r\n    // componentDidUpdate(prevProps, prevState){\r\n    //     if(prevState.todos !== this.state.todos){\r\n    //         //create variable and store JSON.stringify version of todos from state \r\n    //         const temp = JSON.stringify(this.state.todos)\r\n    //         //store this variable as \"todos\" in localStorage\r\n    //         localStorage.setItem(\"todos\", temp)\r\n    //     }\r\n    // }\r\n\r\n    // //Cleanup for removed components \r\n    // componentWillUnmount() {\r\n    //     console.log('Cleaning up...');\r\n    // }\r\n\r\n    //use effect replaces the three component did/will/un \r\n    //use effect side effects can be controlled by optional parameter \r\n    // use effect runs when a monitored variable gets changed then the useEffect is called\r\n    // useEffect(()=> {\r\n    //     console.log('test run')\r\n\r\n    //     //get stored items from local storage \r\n    //     // the [setTodos] is a dependency parameter. Its the only value from the component we are using inside the effect\r\n    //     // we should be able to just use [] as well per React then it only runs on mount and not every render\r\n        \r\n    //     const temp = localStorage.getItem(\"todos\")\r\n    //     const loadedTodos = JSON.parse(temp)\r\n\r\n    //     if (loadedTodos) {\r\n    //         setTodos(loadedTodos)\r\n    //     }\r\n    // }, [])\r\n\r\n    //custom hook, either load from local store or initialize as empty array \r\n    function getInitialTodos() {\r\n        // getting stored items \r\n        const temp = localStorage.getItem(\"todos\")\r\n        const savedTodos = JSON.parse(temp)\r\n        return savedTodos || []\r\n    }\r\n\r\n    // use effect to monitor [todos] and run effect if this variable changes \r\n    useEffect(() => {\r\n        // storign todos items \r\n        const temp = JSON.stringify(todos)\r\n        localStorage.setItem(\"todos\", temp)\r\n}, [todos])\r\n\r\n        //the below return statement is passing this objects functions down to the TodosList component as props. Each listed item is a prop accessible in ToDosList.js \r\n        return (\r\n            <>\r\n            <Navbar />\r\n            <Switch>\r\n            {/* //Router */}\r\n            <Route exact path=\"/\">\r\n            <div className=\"container\">\r\n                <div className=\"inner\">\r\n                <Header />\r\n                <InputTodo \r\n                    addTodoProps={addTodoItem}\r\n                />\r\n                <TodosList \r\n                    todos={todos} \r\n                    handleChangeProps={handleChange}\r\n                    deleteTodoProps={delTodo}\r\n                    setUpdate={setUpdate}\r\n                />\r\n                </div>\r\n            </div>\r\n            </Route>\r\n            <Route path=\"/about\">\r\n                <About />\r\n            </Route>\r\n            <Route path=\"*\">\r\n                <NotMatch />\r\n            </Route>\r\n            </Switch>\r\n            </>\r\n            // <ul>\r\n            //     {this.state.todos.map(todo => (\r\n            //         <li key={todo.id}>{todo.title}</li>\r\n            //     ))}\r\n            // </ul>\r\n        )\r\n    \r\n}\r\n\r\nexport default TodoContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './functionBased/index.css';\n//import components \nimport TodoContainer from \"./functionBased/components/TodoContainer\"\n\n//browser router\n//doesn't work with GitHub pages \nimport {BrowserRouter as Router} from \"react-router-dom\"\n\n//hash router\n//import {HashRouter as Router} from \"react-router-dom\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={ProcessingInstruction.env.PUBLIC_URL}>\n    <TodoContainer />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}